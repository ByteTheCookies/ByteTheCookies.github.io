<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>50 Points on ByteTheCookies</title>
    <link>http://localhost:1313/tags/50-points/</link>
    <description>Recent content in 50 Points on ByteTheCookies</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Sep 2024 10:59:36 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/50-points/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Snake</title>
      <link>http://localhost:1313/writeups/cyberspace2024/snake/</link>
      <pubDate>Mon, 02 Sep 2024 10:59:36 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/cyberspace2024/snake/</guid>
      <description>Snake Description: Can you slither to the win?
Link to the binary: Elf file
Introduction We are faced with a binary file written in Rust (you can see it by simply running strings snake | grep rustc) where we are made to play Snake, the goal is to get PRECISELY to 16525 points.
Solution The solutions were actually different, some people used tools to analyze the memory of a process in real time, I preferred a &amp;lsquo;slower&amp;rsquo; approach, or rather the first thing that came to mind, so I opened binary ninja despite the file being stripped and looked for a value for constant exactly 0xa (i.</description>
    </item>
    
    <item>
      <title>Feature Unlocked</title>
      <link>http://localhost:1313/writeups/cyberspace2024/feature_unlocked/</link>
      <pubDate>Mon, 02 Sep 2024 10:59:31 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/cyberspace2024/feature_unlocked/</guid>
      <description>Feature unlocked Description: The world&amp;rsquo;s coolest app has a brand new feature! Too bad it&amp;rsquo;s not released until after the CTF..
Link: https://feature-unlocked-web-challs.csc.tf/
Introduction Feature unlocked is part of the first wave of the web and is one of the first challanges I solved. Made by cryptocat, who we salute, it is a fairly simple challange if you read the code correctly.
Source # filename: main.py import subprocess import base64 import json import time import requests import os from flask import Flask, request, render_template, make_response, redirect, url_for from Crypto.</description>
    </item>
    
    <item>
      <title>ZipZone</title>
      <link>http://localhost:1313/writeups/cyberspace2024/zipzone/</link>
      <pubDate>Mon, 02 Sep 2024 10:59:17 +0200</pubDate>
      
      <guid>http://localhost:1313/writeups/cyberspace2024/zipzone/</guid>
      <description>Zipzone Description: I was tired of trying to find a good file server for zip files, so I made my own! It&amp;rsquo;s still a work in progress, but I think it&amp;rsquo;s pretty good so far.
Link: https://zipzone-web.challs.csc.tf/
Introduction ZipZone is the only one web in the beginner&amp;rsquo;s category and, as the title suggests, you have to upload zip files that will be unzipped later, so you have to download the extracted files afterwards.</description>
    </item>
    
  </channel>
</rss>